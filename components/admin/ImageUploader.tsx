// components/admin/ImageUploader.tsx
'use client';
import { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

// ƒê·ªãnh nghƒ©a props cho component
interface ImageUploaderProps {
  // H√†m s·∫Ω ƒë∆∞·ª£c g·ªçi v·ªõi URL c·ªßa ·∫£nh sau khi t·∫£i l√™n th√†nh c√¥ng
  onUpload: (url: string) => void;
  // (T√πy ch·ªçn) H√†m s·∫Ω ƒë∆∞·ª£c g·ªçi n·∫øu c√≥ l·ªói x·∫£y ra
  onError?: (message: string) => void;
}

export default function ImageUploader({ onUpload, onError }: ImageUploaderProps) {
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ t·ªëi ∆∞u h√≥a h√†m onDrop
  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (!file) return;

    // Reset tr·∫°ng th√°i l·ªói v√† b·∫Øt ƒë·∫ßu t·∫£i l√™n
    setError(null);
    setUploading(true);

    try {
      // G·ª≠i request ƒë·∫øn API endpoint
      const response = await fetch(
        `/api/upload?filename=${encodeURIComponent(file.name)}`,
        {
          method: 'POST',
          body: file,
        },
      );

      // X·ª≠ l√Ω n·∫øu request kh√¥ng th√†nh c√¥ng
      if (!response.ok) {
        throw new Error('Server tr·∫£ v·ªÅ l·ªói khi t·∫£i ·∫£nh l√™n.');
      }

      // L·∫•y URL t·ª´ k·∫øt qu·∫£ JSON
      const newBlob = await response.json();
      
      // G·ªçi h√†m callback onUpload v·ªõi URL nh·∫≠n ƒë∆∞·ª£c
      onUpload(newBlob.url);

    } catch (err: any) {
      const errorMessage = 'T·∫£i ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
      console.error(errorMessage, err);
      setError(errorMessage);
      // G·ªçi callback onError n·∫øu c√≥
      if (onError) {
        onError(errorMessage);
      }
    } finally {
      // K·∫øt th√∫c tr·∫°ng th√°i t·∫£i l√™n
      setUploading(false);
    }
  }, [onUpload, onError]);

  // C·∫•u h√¨nh react-dropzone
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { 'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp'] },
    multiple: false,
  });

  return (
    <div
      {...getRootProps()}
      className={`
        flex flex-col items-center justify-center p-8 border-2 rounded-lg text-center transition-all duration-200
        ${isDragActive 
          ? 'border-blue-500 bg-blue-50 text-blue-700 shadow-md' 
          : error 
            ? 'border-red-500 bg-red-50 text-red-700' 
            : 'border-dashed border-gray-300 bg-gray-50 text-gray-600 hover:border-blue-400 hover:bg-blue-50'
        }
        cursor-pointer min-h-[150px]
      `}
    >
      <input {...getInputProps()} />
      {uploading ? (
        <p className="text-lg font-medium text-blue-600">‚è≥ ƒêang t·∫£i l√™n...</p>
      ) : error ? (
        <>
          <p className="text-lg font-bold text-red-600">üö´ ƒê√£ x·∫£y ra l·ªói</p>
          <p className="text-sm text-red-500">{error}</p>
          <p className="text-sm text-gray-500 mt-2">Nh·∫•n ƒë·ªÉ th·ª≠ l·∫°i</p>
        </>
      ) : isDragActive ? (
        <p className="text-lg font-medium"> th·∫£ ·∫£nh v√†o ƒë√¢y...</p>
      ) : (
        <>
          <svg className="w-10 h-10 mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 0115.9 6L16 6a3 3 0 013 3v10a2 2 0 01-2 2H7a2 2 0 01-2-2V7a2 2 0 012-2h4"></path></svg>
          <p className="text-base font-medium">K√©o th·∫£ ·∫£nh v√†o ƒë√¢y, ho·∫∑c <span className="text-blue-600 hover:underline">nh·∫•n ƒë·ªÉ ch·ªçn t·ªáp</span></p>
          <p className="text-sm text-gray-500 mt-1">H·ªó tr·ª£: JPG, PNG, GIF, WEBP</p>
        </>
      )}
    </div>
  );
}